# -*- coding: utf-8 -*-
"""Leximas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1afXV1wIxZY83O0kRGXlRy4Ve8mwa5rLX
"""

import re 
import pandas as pd
#Inicialização da lista
#Exemplo de como digitar ( 1 - 1 )
exemplo = input('entrada da base de lados dos lexemas: Por Favor adicionar espaco entre cada caracter ou causara erro')
BaseDeDados=[0]
operations=[]

#Analisador da expressão regular e tratamento da base de erros e leitura
#Primeira Camada de anale da expressao de exemplo com lexema para filtrar o codigo evitando entrada de caracteres numericos em calculadora
#Tratamento
if (re.search(r'[a-zA-Z]',exemplo)):
    raise Exception("Erro: não é aceito caractere")   
else:
#Limpeza de dados correspondentes e espaços
    tratamento = " ".join(exemplo.split())
    BaseDeDados =re.split(r' ', tratamento)

#pos-tratamento e analisador da base de dados
primeiroOperador= filter(lambda i: re.search(r'(?i)\d',i,re.I), BaseDeDados)
numeros= list(primeiroOperador)
segundoOperador =filter(lambda i:re.search(r'\(', i),BaseDeDados)
x_parentEsqu=list(segundoOperador)
terceiroOperador =filter(lambda i:re.search(r'\)', i),BaseDeDados)
x_parentDire=list(terceiroOperador)

#Lista de pesquisa de operadores do regex
for i in BaseDeDados:
    if re.findall(r'[- / * + **]',i):
        operations.append(i)

#Definições das operações possiveis
table_of_operations = {'+':'Operacao de Soma', '-':'Operacao de Subtracao', '*':'Operacao de Mutiplicacao','/': 'Operacao de Divisao', '**':'Operacao de Potencializacao',} 
expressoesEspeciais={'(':'Parenteze_Esquerdo', ')':'Parenteze_Direito', '@':'Comentario'}
tabelasResultadosExpressoes = {}

tabelaExpressoes=[]
#Adicionando para tabela valor
for i in BaseDeDados:
    if i in operations and i not in numeros :
        tabelaExpressoes.append(table_of_operations[i])
    elif i in x_parentEsqu:
        valor.append(table_of_parenthesis[i])
    elif i in x_parentDire:
        tabelaExpressoes.append(table_of_parenthesis[i])            
    else:
        tabelaExpressoes.append(i)

tipo=[]
#Adicionando para tabela tipo
for i in BaseDeDados:
    if i in operations and i not in numeros:
        tipo.append('Operador')
    elif i in x_parentEsqu:
        tipo.append('Pontuação')
    elif i in x_parentDire:
        tipo.append('Pontuação')    
    else :
        tipo.append('Numero')

resultado = list(zip(BaseDeDados,tipo,tabelaExpressoes))

dfResultadoPrint = pd.DataFrame([
      resultado[0],
      resultado[1],
      resultado[2]
    ],
  columns=['Lexema, BaseDeDados', 'Tipo de Dado','Tabela Expressoes']
)

print(' ')
dfResultadoPrint